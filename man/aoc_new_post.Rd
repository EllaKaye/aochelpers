% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup.R
\name{aoc_new_post}
\alias{aoc_new_post}
\alias{aoc_new_day}
\title{Set up up a new post}
\usage{
aoc_new_post(day, year = NULL)

aoc_new_day(day, year = NULL)
}
\arguments{
\item{day}{An integer between 1 and 25}

\item{year}{An integer representing the year. Defaults to the current year.}
}
\value{
The path to the new day (invisibly)
}
\description{
Create the necessary directories for a new post, copy in template files and make them relevant to the day and year (see Details).
}
\details{
\code{aoc_new_post()} and
\code{aoc_new_day()} both assume they being called from a project with a directory
\verb{_templates}, with a subdirectory \code{post-template} that contains, at minimum,
the file \code{index.qmd}. They will copy all the files in \code{post-template} into a
directory \code{"./YYYY/day/DD"} where \code{YYYY} is the value of the year parameter and
\code{DD} is value of the day parameter (creating these directories if they do not
already exist). This path echoes the URL structure of the Advent of Code
website. Additionally, they replace any instances of \code{YYYY} and \code{DD} in the
\code{index.qmd} and (if present) \code{script.R} files with the values of the year and day
parameters, respectively. In addition, \code{aoc_new_day()} will also run
\code{aoc_get_input()} to download the puzzle input and save it into the post
directory.

If you have your Advent of Code session token set in your
\code{.Renviron} file, we recommend using \code{aoc_new_day()} over \code{aoc_new_post()}.
If you wish to download and save your puzzle input separately, use
\code{aoc_new_post()}.
}
\examples{
\dontrun{aoc_new_post(1, 2022)}
\dontrun{aoc_new_day(1, 2022)}
}
\seealso{
\code{\link[=aoc_get_input]{aoc_get_input()}}
}
